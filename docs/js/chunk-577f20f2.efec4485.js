(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-577f20f2"],{"0485":function(t,e,a){},4811:function(t,e,a){"use strict";a.r(e);var n=a("7a23"),s={class:"pagelink"},i=Object(n["g"])("新型コロナウイルス情報"),c=Object(n["h"])("a",null,"＞岡山県コロナ感染者詳細情報",-1),r={key:0},l={key:1,id:"chart",height:"100",width:"300"},o={key:2,id:"chart"},d=Object(n["h"])("br",null,null,-1),u=Object(n["h"])("br",null,null,-1),b={class:"filter"},h={style:{"white-space":"nowrap"},class:"filterkeyword"},O=Object(n["g"])("絞り込み"),j={class:"table1"},f={class:"detailbody"};function k(t,e,a,k,p,y){var g=Object(n["x"])("mainmenu"),m=Object(n["x"])("router-link");return Object(n["q"])(),Object(n["d"])(n["a"],null,[Object(n["h"])(g,{judge:"0"}),Object(n["h"])("div",s,[Object(n["h"])(m,{to:"/"},{default:Object(n["D"])((function(){return[i]})),_:1}),c]),t.$store.state.detaildata.length>0?(Object(n["q"])(),Object(n["d"])("h1",r,"岡山県コロナ感染者詳細情報")):Object(n["e"])("",!0),Object(n["h"])("button",{type:"button",onClick:e[1]||(e[1]=function(){return y.Back.apply(y,arguments)}),disabled:t.isTestDisabledBack},"前",8,["disabled"]),Object(n["h"])("button",{type:"button",onClick:e[2]||(e[2]=function(){return y.Next.apply(y,arguments)}),disabled:t.isTestDisabledNext},"次",8,["disabled"]),1==y.isLarge?(Object(n["q"])(),Object(n["d"])("canvas",l)):0==y.isLarge?(Object(n["q"])(),Object(n["d"])("canvas",o)):Object(n["e"])("",!0),d,u,Object(n["h"])("div",b,[Object(n["h"])("span",h,[O,Object(n["E"])(Object(n["h"])("input",{type:"text","onUpdate:modelValue":e[3]||(e[3]=function(e){return t.keyword=e})},null,512),[[n["B"],t.keyword]])])]),Object(n["h"])("table",j,[Object(n["h"])("thead",null,[Object(n["h"])("tr",null,[(Object(n["q"])(!0),Object(n["d"])(n["a"],null,Object(n["w"])(t.columnshead,(function(t){return Object(n["q"])(),Object(n["d"])("th",{key:t},Object(n["z"])(t),1)})),128))])]),Object(n["h"])("tbody",f,[(Object(n["q"])(!0),Object(n["d"])(n["a"],null,Object(n["w"])(y.reverseItems,(function(e){return Object(n["q"])(),Object(n["d"])("tr",{key:e},[(Object(n["q"])(!0),Object(n["d"])(n["a"],null,Object(n["w"])(t.columns,(function(t,a){return Object(n["q"])(),Object(n["d"])("td",{key:a},Object(n["z"])(e[a]),1)})),128))])})),128))])])],64)}a("99af"),a("4de4"),a("c975"),a("d81d"),a("13d5"),a("fb6a"),a("a434");var p=a("30ef"),y=a.n(p),g=a("ad3a");function m(t,e,a){for(var n=[],s=0;s<e.length;s++)n[s]=e[s].slice(0,7);for(var i=n.filter((function(t,e,a){return a.indexOf(t)===e})),c=0;c<e.length;c++)e[c].slice(0,7)!=i[i.length-1-a]&&(e.splice(c,1),t.splice(c,1),c-=1);return{data:t,label:e,LabelLen:i.length}}function w(t,e,a){t.data.labels=e,t.data.datasets[0].data=a,t.update()}var C={name:"Detailpage",components:{mainmenu:g["a"]},data:function(){var t={"公表年月日":"公表年月日","患者＿居住地":"患者＿居住地","患者＿年代":"患者＿年代","患者＿性別":"患者＿性別"};return{columnshead:["公表年月日","居住地","年代","性別"],keyword:"",isTestDisabledBack:!1,isTestDisabledNext:!0,kenDetails:this.$store.state.detaildata,columns:t,tasks:this.$store.state.detaildata2,count:0}},methods:{listCategoryCreat:function(t){for(var e=0;e<this.kenDetails.length;e++)""==this.kenDetails[e]["日別の感染者数"]&&(this.kenDetails[e]["日別の感染者数"]=0);var a=this.kenDetails.map((function(e){return[e[t]]})).reduce((function(t,e){return t.concat(e)}));return a},Next:function(){this.count=this.count-1,this.count<=0?(this.isTestDisabledNext=!0,this.isTestDisabledBack=!1,this.count=0):(this.isTestDisabledNext=!1,this.isTestDisabledBack=!1)},Back:function(){this.count=this.count+1,this.count>=this.CountLength-1?(this.isTestDisabledBack=!0,this.isTestDisabledNext=!1,this.count=this.CountLength-1):(this.isTestDisabledBack=!1,this.isTestDisabledNext=!1)},CreateChart:function(){var t=this.listCategoryCreat("集計時点_年月日"),e=this.listCategoryCreat("日別の感染者数"),a=m(e,t,this.count);this.CountLength=a.LabelLen;var n={type:"bar",data:{labels:a.label,datasets:[{data:a.data,backgroundColor:"#00B0F0",label:"新規感染者数"}]},options:{plugins:{pan:{enabled:!0,mode:"xy"},zoom:{enabled:!0,drag:!0,mode:"xy"}},scales:{yAxes:[{ticks:{beginAtZero:!0,userCallback:function(t){if(Math.floor(t)===t)return t},fontSize:15,suggestedMax:50,stepSize:10}}]}}};this.Chart=new y.a(document.getElementById("chart").getContext("2d"),n)}},computed:{reverseItems:function(){var t=[];for(var e in this.tasks){var a=this.tasks[e];-1===a.公表年月日.indexOf(this.keyword)&&-1===a.患者＿居住地.indexOf(this.keyword)&&-1===a.患者＿年代.indexOf(this.keyword)&&-1===a.患者＿性別.indexOf(this.keyword)||t.push(a)}return t.slice().reverse()},isLarge:function(){return!!window.matchMedia("(min-width: 480px)").matches}},watch:{count:function(){var t=this.listCategoryCreat("集計時点_年月日"),e=this.listCategoryCreat("日別の感染者数"),a=m(e,t,this.count);w(this.Chart,a.label,a.data)}},mounted:function(){this.CreateChart()}};a("82b4");C.render=k;e["default"]=C},"82b4":function(t,e,a){"use strict";a("0485")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,